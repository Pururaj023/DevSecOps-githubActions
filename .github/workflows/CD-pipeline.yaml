name: Pusher docker Image to docker hub and deploy to ec2 using terraform

on:
  workflow_run:
    workflows: ["DevSecOps CI Pipeline"]
    types:
      - completed

jobs:
  stage1-Push-Docker-Image-to-Docker-Hub:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t django-app ./mynotes
          docker tag django-app:latest ${{ secrets.DOCKER_HUB_USERNAME }}/django-app:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/django-app:latest

  stage2-Deploy-to-EC2-using-Terraform:
    runs-on: ubuntu-latest
    needs: stage1-Push-Docker-Image-to-Docker-Hub
    outputs:
      ec2_ip: ${{ steps.ec2_ip.outputs.ec2_ip }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:                           # ðŸ‘ˆ credentials must be here
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:                           # also keep here for safety
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Save EC2 Public IP
        id: ec2_ip
        run: |
          # get raw output and strip whitespace/newlines
          PUBLIC_IP=$(terraform output -raw ec2_public_ip | tr -d '\r\n')

          # check if output is empty
          if [ -z "$PUBLIC_IP" ]; then
          echo "EC2 public IP not found!"
          exit 1
          fi

          # write to GitHub Actions environment
          echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_OUTPUT
          # debug
          echo "EC2 Public IP saved: $PUBLIC_IP"
        working-directory: ./terraform
        
      - name: Show EC2 Public IP
        run: echo "EC2 instance public IP is $EC2_PUBLIC_IP"

  stage3-deploy-Application:
    runs-on: ubuntu-latest
    needs: stage2-Deploy-to-EC2-using-Terraform
    steps:
      - name: Deploy Django app on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ needs.stage2-Deploy-to-EC2-using-Terraform.outputs.ec2_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Logging into Docker Hub"
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            echo "Pulling latest image"
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/django-app:latest

            echo "Stopping old container if exists"
            docker stop django-app || true
            docker rm django-app || true

            echo "Running new container"
            docker run -d -p 80:80 --name django-app ${{ secrets.DOCKER_HUB_USERNAME }}/django-app:latest

